{"version":3,"sources":["webpack:///./.linaria-cache/src/components/common/Modal/Modal.linaria.css","webpack:///src/components/common/Modal/Modal.tsx","webpack:///./.linaria-cache/src/components/modals/AddCoinModal/TokenRow/TokenRow.linaria.css","webpack:///./.linaria-cache/src/components/modals/AddCoinModal/TokenList/TokenList.linaria.css","webpack:///./.linaria-cache/src/components/modals/AddCoinModal/AddCoinModal.linaria.css","webpack:///src/components/modals/AddCoinModal/TokenRow/TokenRow.tsx","webpack:///src/components/modals/AddCoinModal/TokenList/TokenList.tsx","webpack:///src/components/modals/AddCoinModal/AddCoinModal.tsx"],"names":["Wrapper","Header","Title","Description","CloseWrapper","CloseIcon","Content","Modal","className","title","description","close","onClick","name","children","ChevronWrapper","ChevronIcon","Main","InfoWrapper","Info","Top","Bottom","Additional","CopyWrapper","CopyIcon","TokenRow","closeModal","dispatch","useDispatch","inputRef","useRef","isOpen","setIsOpen","useState","handleChevronClick","classNames","opened","symbol","token","size","primary","small","async","createAccountForToken","ref","value","readOnly","postfix","input","document","TokenList","items","key","WrapperModal","ScrollableContainer","AddCoinModal","cluster","useSelector","state","tokenAccounts","TokenAccount","availableTokens","Token","isMainnetEntrypoint","clusterApiUrl","filteredTokens","useMemo","existsMintAccounts","Set","link","createMint","amount","decimals","initialAccount"],"mappings":"0FAAA,Q,sGCOA,MAAMA,EAAO,6DAUPC,EAAM,4DAQNC,EAAK,0DAOLC,EAAW,qEAQXC,EAAY,wEAEZC,EAAS,gEAWTC,EAAO,8DASAC,EAAkC,EAAC,yCAK9CC,eAGE,qBAASA,UAAT,GACE,yBACGC,EAAQ,yBAAH,QAAN,EACCC,EAAc,yBAAH,QAAZ,EACCC,EACC,qBAAcC,QAAd,GACE,qBAAWC,KAAX,gBAFJ,GAMDC,EAAW,yBAAH,QAAT,G,yCChFN,Q,iCCAA,Q,iCCAA,Q,6LCcA,MAAMd,EAAO,6DAWPe,EAAc,2EAWdC,EAAW,oEAOXC,EAAI,wDAIJX,EAAO,8DAKPY,EAAW,qEAQXC,EAAI,uDAQJC,EAAG,sDAQHC,EAAM,4DAUNC,EAAU,mEASVC,EAAW,qEAIXC,EAAQ,6DAUDC,EAAqC,EAAC,QAASC,iBAC1D,MAAMC,EAAWC,cAEXC,EAAWC,iBAAjB,OACOC,EAAQC,GAAaC,oBAA5B,GAEMC,EAAqB,KACzBF,OAmBF,OACE,yBACE,qBAAgBpB,QAAhB,EAA6CJ,UAAW2B,IAAW,CAAEC,OAAQL,KAC3E,qBAAalB,KAAb,aAEF,yBACE,yBACE,qBAAaD,QAAb,GACE,uBAAayB,OAAQC,EAArB,OAAmCC,KAAnC,KACA,yBACE,yBACE,6BAAMD,EAAD,QADP,IAC4B,+BAE5B,yBACE,6BAAMA,EAAD,MADP,IAC0B,iCAI9B,uBAAQE,SAAR,EAAgBC,OAAhB,EAAsB7B,QAlCP8B,gBACff,EAASgB,YAAsB,CAAEL,WAEvCZ,MA+BM,QAIF,qBAAYlB,UAAW2B,IAAW,CAAEC,OAAQL,KAC1C,uBACEa,IADF,EAEEnC,MAAU6B,EAAMD,OAAR,gBACRQ,MAAOP,UAHT,WAIEQ,UAJF,EAKEC,QACE,qBAAanC,QAvCD,KACtB,MAAMoC,EAAQnB,EAAd,QAEA,IACEmB,UACAA,sBAA2BA,QAA3BA,QACAC,gCAkCU,qBAAUpC,KAAV,gB,OC5JhB,MAAMb,EAAO,8DAUAkD,EAAsC,EAAC,QAASxB,gBAC3D,EAKE,yBACGyB,MAAWb,GACV,qBAAUc,IAAKd,UAAf,WAAyCA,MAAzC,EAAuDZ,WADzD,MALF,K,OCLJ,MAAM2B,EAAY,oEAIZC,EAAmB,sFAcZC,EAAyC,EAAG5C,YACvD,MAAMgB,EAAWC,cACX4B,EAAUC,YAAY,GAAsBC,SAAlD,SACMC,EAAgBF,YAAY,GAChCC,2BAAgCpB,GAAUsB,SAD5C,KAGMC,EAAkBJ,YAAY,GAClCC,6BAAkCpB,GAAUwB,SAD9C,KAIMC,EAAsBP,IAAYQ,YAAxC,gBAUMC,EAAiBC,kBAAQ,KAC7B,MACE,OAGF,MAAMC,EAAqB,IAAIC,IAAIT,MAAmBrB,GAAUA,eAAhE,aAEA,OAAOuB,SAAwBvB,IAAW6B,MAAuB7B,UAAjE,cACC,CARH,IAUA,OACE,qBACE7B,MADF,YAEEC,YACE,0FAEIqD,EAAF,KACE,oCACE,IACA,uBAAQM,MAAR,EAAazD,QA3BQ,KAC/Be,EAAS2C,YAAW,CAAEC,OAAF,IAAgBC,SAAhB,EAA6BC,eAAgB,IAAI,EAAJ,OA0BvD,qBAOR9D,MAfF,IAgBGsD,yBACC,yBACE,qBAAWd,MAAX,EAAkCzB,WAjCvB,KACjBf,aA8BE,I","file":"1.bundle.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import React, { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n\n  background-color: #fff;\n  border-radius: 15px;\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  padding: 20px 30px;\n\n  border-bottom: 1px solid ${rgba('#000', 0.05)};\n`;\n\nconst Title = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 100%;\n`;\n\nconst Description = styled.div`\n  margin-top: 10px;\n\n  color: ${rgba('#000', 0.5)};\n  font-size: 14px;\n  line-height: 17px;\n`;\n\nconst CloseWrapper = styled.div``;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  width: 32px;\n  height: 32px;\n\n  cursor: pointer;\n`;\n\nconst Content = styled.div``;\n\ntype Props = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  close?: () => void;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  close,\n  children,\n  className,\n}) => {\n  return (\n    <Wrapper className={className}>\n      <Header>\n        {title ? <Title>{title}</Title> : undefined}\n        {description ? <Description>{description}</Description> : undefined}\n        {close ? (\n          <CloseWrapper onClick={close}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n        ) : undefined}\n      </Header>\n      {children ? <Content>{children}</Content> : undefined}\n    </Wrapper>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","import React, { FunctionComponent, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { styled } from '@linaria/react';\nimport * as web3 from '@solana/web3.js';\nimport classNames from 'classnames';\nimport { rgba } from 'polished';\n\nimport { Token } from 'api/token/Token';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { Avatar, Button, Icon, Input } from 'components/ui';\nimport { TokenType } from 'constants/tokens';\nimport { createAccountForToken } from 'store/slices/wallet/WalletSlice';\n\nconst Wrapper = styled.div`\n  display: flex;\n  padding: 15px 30px;\n\n  border-bottom: 1px solid ${rgba('#000', 0.05)};\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst ChevronWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 44px;\n  margin-right: 12px;\n\n  &.opened {\n    transform: rotate(180deg);\n  }\n`;\n\nconst ChevronIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: ${rgba('#000', 0.4)};\n`;\n\nconst Main = styled.div`\n  flex: 1;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  margin-right: 48px;\n\n  cursor: pointer;\n`;\n\nconst Info = styled.div`\n  flex: 1;\n  margin-left: 20px;\n\n  font-size: 14px;\n  line-height: 17px;\n`;\n\nconst Top = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: #000;\n  font-weight: 500;\n`;\n\nconst Bottom = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 4px;\n\n  color: ${rgba('#000', 0.5)};\n  font-size: 14px;\n  line-height: 17px;\n`;\n\nconst Additional = styled.div`\n  display: none;\n  margin-top: 20px;\n\n  &.opened {\n    display: block;\n  }\n`;\n\nconst CopyWrapper = styled.div`\n  cursor: pointer;\n`;\n\nconst CopyIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n`;\n\ntype Props = {\n  token: Token;\n  closeModal: () => void;\n};\n\nexport const TokenRow: FunctionComponent<Props> = ({ token, closeModal }) => {\n  const dispatch = useDispatch();\n  // eslint-disable-next-line unicorn/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleChevronClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleAddClick = async () => {\n    await dispatch(createAccountForToken({ token }));\n    // dispatch(getOwnedTokenAccounts());\n    closeModal();\n  };\n\n  const handleCopyClick = () => {\n    const input = inputRef.current;\n\n    if (input) {\n      input.focus();\n      input.setSelectionRange(0, input.value.length);\n      document.execCommand('copy');\n    }\n  };\n\n  return (\n    <Wrapper>\n      <ChevronWrapper onClick={handleChevronClick} className={classNames({ opened: isOpen })}>\n        <ChevronIcon name=\"chevron\" />\n      </ChevronWrapper>\n      <Main>\n        <Content>\n          <InfoWrapper onClick={handleChevronClick}>\n            <TokenAvatar symbol={token.symbol} size={44} />\n            <Info>\n              <Top>\n                <div>{token.symbol}</div> <div />\n              </Top>\n              <Bottom>\n                <div>{token.name}</div> <div />\n              </Bottom>\n            </Info>\n          </InfoWrapper>\n          <Button primary small onClick={handleAddClick}>\n            Add\n          </Button>\n        </Content>\n        <Additional className={classNames({ opened: isOpen })}>\n          <Input\n            ref={inputRef}\n            title={`${token.symbol} Mint Address`}\n            value={token.address.toBase58()}\n            readOnly\n            postfix={\n              <CopyWrapper onClick={handleCopyClick}>\n                <CopyIcon name=\"copy\" />\n              </CopyWrapper>\n            }\n          />\n        </Additional>\n      </Main>\n    </Wrapper>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Token } from 'api/token/Token';\nimport { TokenType } from 'constants/tokens';\n\nimport { TokenRow } from '../TokenRow';\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-gap: 2px;\n`;\n\ntype Props = {\n  items?: Token[];\n  closeModal: () => void;\n};\n\nexport const TokenList: FunctionComponent<Props> = ({ items, closeModal }) => {\n  if (!items) {\n    return null;\n  }\n\n  return (\n    <Wrapper>\n      {items.map((token) => (\n        <TokenRow key={token.address.toBase58()} token={token} closeModal={closeModal} />\n      ))}\n    </Wrapper>\n  );\n};\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { styled } from '@linaria/react';\nimport { Account, clusterApiUrl } from '@solana/web3.js';\n\nimport { Token } from 'api/token/Token';\nimport tokenConfig from 'api/token/token.config';\nimport { TokenAccount } from 'api/token/TokenAccount';\nimport { Modal } from 'components/common/Modal';\nimport { Button } from 'components/ui';\nimport { RootState } from 'store/rootReducer';\nimport { createMint } from 'store/slices/wallet/WalletSlice';\n\nimport { TokenList } from './TokenList';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 588px;\n`;\n\nconst ScrollableContainer = styled.div`\n  max-height: 668px;\n  padding-bottom: 20px;\n  overflow-y: auto;\n\n  &::-webkit-scrollbar-track {\n    margin-bottom: 16px;\n  }\n`;\n\ntype Props = {\n  close: () => void;\n};\n\nexport const AddCoinModal: FunctionComponent<Props> = ({ close }) => {\n  const dispatch = useDispatch();\n  const cluster = useSelector((state: RootState) => state.wallet.cluster);\n  const tokenAccounts = useSelector((state: RootState) =>\n    state.wallet.tokenAccounts.map((token) => TokenAccount.from(token)),\n  );\n  const availableTokens = useSelector((state: RootState) =>\n    state.global.availableTokens.map((token) => Token.from(token)),\n  );\n\n  const isMainnetEntrypoint = cluster === clusterApiUrl('mainnet-beta');\n\n  const handleMintTestTokenClick = () => {\n    dispatch(createMint({ amount: 1000, decimals: 2, initialAccount: new Account() }));\n  };\n\n  const closeModal = () => {\n    close();\n  };\n\n  const filteredTokens = useMemo(() => {\n    if (!availableTokens) {\n      return;\n    }\n\n    const existsMintAccounts = new Set(tokenAccounts.map((token) => token.mint.address.toBase58()));\n\n    return availableTokens.filter((token) => !existsMintAccounts.has(token.address.toBase58()));\n  }, [availableTokens]);\n\n  return (\n    <WrapperModal\n      title=\"Add coins\"\n      description={\n        <>\n          Add a token to your wallet. This will cost some SOL\n          {!isMainnetEntrypoint ? (\n            <>\n              {' '}\n              <Button link onClick={handleMintTestTokenClick}>\n                Mint test token\n              </Button>\n            </>\n          ) : null}\n        </>\n      }\n      close={close}>\n      {filteredTokens?.length ? (\n        <ScrollableContainer>\n          <TokenList items={filteredTokens} closeModal={closeModal} />\n        </ScrollableContainer>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}