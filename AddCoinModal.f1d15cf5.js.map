{"version":3,"sources":["components/common/Modal/Modal.tsx","components/common/Modal/index.ts","store/utils/instructions/tokenProgram.ts","store/actions/complex/tokens.ts","components/modals/AddCoinModal/TokenRow/TokenRow.tsx","components/modals/AddCoinModal/TokenRow/index.ts","components/modals/AddCoinModal/TokenList/TokenList.tsx","components/modals/AddCoinModal/TokenList/index.ts","components/modals/AddCoinModal/AddCoinModal.tsx","components/modals/AddCoinModal/index.ts"],"names":["Wrapper","name","class","Header","Title","Description","CloseWrapper","CloseIcon","Icon","Content","Modal","title","description","close","children","className","undefined","LAYOUT","BufferLayout","union","u8","addVariant","struct","blob","nu64","instructionMaxSpan","Math","max","Object","values","registry","map","r","span","encodeTokenInstructionData","instruction","b","Buffer","alloc","encode","slice","initializeMintInstruction","mint","decimals","mintAuthority","freezeAuthority","keys","pubkey","isSigner","isWritable","web3","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","initializeMint","toBuffer","freezeAuthorityOption","PublicKey","programId","TOKEN_PROGRAM_ID","initializeAccountInstruction","account","owner","initializeAccount","mintToInstruction","destination","amount","mintTo","createAndInitializeMint","initialAccount","dispatch","connection","ApiSolanaService","getConnection","transaction","Transaction","getMinimumBalanceForRentExemption","MINT_LAYOUT","lamportsForMint","add","SystemProgram","createAccount","fromPubkey","publicKey","newAccountPubkey","lamports","space","signers","push","ACCOUNT_LAYOUT","lamportsForAccount","SOLANA_API","action","mintTestTokenAsyncAction","options","preflightCommitment","createAndInitializeTokenAccount","payer","mintPublicKey","newAccount","createTokenAccount","tokenAddress","getState","ownerAccount","blockchain","console","info","Account","ChevronWrapper","ChevronIcon","Main","InfoWrapper","AvatarStyled","Avatar","Info","Top","Bottom","Additional","CopyWrapper","CopyIcon","TokenRow","mintAddress","tokenName","tokenSymbol","icon","inputRef","isOpen","setIsOpen","handleChevronClick","opened","input","current","focus","setSelectionRange","value","length","document","execCommand","TokenList","items","item","WrapperModal","ScrollableContainer","AddCoinModal","state","entrypoint","tokenAccounts","entities","tokens","TOKENS_BY_ENTRYPOINT","isMainnetEntrypoint","clusterApiUrl","filteredTokens","existsMintAccounts","Set","token","parsed","toBase58","filter","has"],"mappings":"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","file":"AddCoinModal.f1d15cf5.js","sourceRoot":"../src","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { styled } from 'linaria/react';\nimport { rgba } from 'polished';\nimport { Icon } from 'components/ui';\nconst Wrapper = /*#__PURE__*/styled(\"div\")({\n  name: \"Wrapper\",\n  class: \"wrdya2m\"\n});\nconst Header = /*#__PURE__*/styled(\"div\")({\n  name: \"Header\",\n  class: \"h1vh307k\"\n});\nconst Title = /*#__PURE__*/styled(\"div\")({\n  name: \"Title\",\n  class: \"t1qfjroh\"\n});\nconst Description = /*#__PURE__*/styled(\"div\")({\n  name: \"Description\",\n  class: \"d8b2mdb\"\n});\nconst CloseWrapper = /*#__PURE__*/styled(\"div\")({\n  name: \"CloseWrapper\",\n  class: \"c135gzia\"\n});\nconst CloseIcon = /*#__PURE__*/styled(Icon)({\n  name: \"CloseIcon\",\n  class: \"c1whuod3\"\n});\nconst Content = /*#__PURE__*/styled(\"div\")({\n  name: \"Content\",\n  class: \"c12kmdhp\"\n});\ntype Props = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  close?: () => void;\n  className?: string;\n};\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  close,\n  children,\n  className\n}) => {\n  return <Wrapper className={className}>\n      <Header>\n        {title ? <Title>{title}</Title> : undefined}\n        {description ? <Description>{description}</Description> : undefined}\n        {close ? <CloseWrapper onClick={close}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper> : undefined}\n      </Header>\n      <Content>{children}</Content>\n    </Wrapper>;\n};","export { Modal } from './Modal';\n","import * as web3 from '@solana/web3.js';\nimport * as BufferLayout from 'buffer-layout';\n\nimport { TOKEN_PROGRAM_ID } from 'constants/solana/bufferLayouts';\n\nconst LAYOUT = BufferLayout.union(BufferLayout.u8('instruction'));\nLAYOUT.addVariant(\n  0,\n  BufferLayout.struct([\n    BufferLayout.u8('decimals'),\n    BufferLayout.blob(32, 'mintAuthority'),\n    BufferLayout.u8('freezeAuthorityOption'),\n    BufferLayout.blob(32, 'freezeAuthority'),\n  ]),\n  'initializeMint',\n);\nLAYOUT.addVariant(1, BufferLayout.struct([]), 'initializeAccount');\nLAYOUT.addVariant(3, BufferLayout.struct([BufferLayout.nu64('amount')]), 'transfer');\nLAYOUT.addVariant(7, BufferLayout.struct([BufferLayout.nu64('amount')]), 'mintTo');\nLAYOUT.addVariant(8, BufferLayout.struct([BufferLayout.nu64('amount')]), 'burn');\nLAYOUT.addVariant(9, BufferLayout.struct([]), 'closeAccount');\n\nconst instructionMaxSpan = Math.max(...Object.values(LAYOUT.registry).map((r) => r.span));\n\nfunction encodeTokenInstructionData(instruction) {\n  const b = Buffer.alloc(instructionMaxSpan);\n  const span = LAYOUT.encode(instruction, b);\n  return b.slice(0, span);\n}\n\nexport function initializeMintInstruction({\n  mint,\n  decimals,\n  mintAuthority,\n  freezeAuthority,\n}: {\n  mint: web3.PublicKey;\n  decimals: number;\n  mintAuthority: web3.PublicKey;\n  freezeAuthority?: web3.PublicKey;\n}) {\n  const keys = [\n    { pubkey: mint, isSigner: false, isWritable: true },\n    { pubkey: web3.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n  ];\n\n  return new web3.TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeMint: {\n        decimals,\n        mintAuthority: mintAuthority.toBuffer(),\n        freezeAuthorityOption: !!freezeAuthority,\n        freezeAuthority: (freezeAuthority || new web3.PublicKey()).toBuffer(),\n      },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function initializeAccountInstruction({\n  account,\n  mint,\n  owner,\n}: {\n  account: web3.PublicKey;\n  mint: web3.PublicKey;\n  owner: web3.PublicKey;\n}) {\n  const keys = [\n    { pubkey: account, isSigner: false, isWritable: true },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: web3.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n  ];\n\n  return new web3.TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeAccount: {},\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function mintToInstruction({\n  mint,\n  destination,\n  amount,\n  mintAuthority,\n}: {\n  mint: web3.PublicKey;\n  destination: web3.PublicKey;\n  amount: number;\n  mintAuthority: web3.PublicKey;\n}) {\n  const keys = [\n    { pubkey: mint, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: mintAuthority, isSigner: true, isWritable: false },\n  ];\n\n  return new web3.TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      mintTo: {\n        amount,\n      },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n","import * as web3 from '@solana/web3.js';\n\nimport { ACCOUNT_LAYOUT, MINT_LAYOUT, TOKEN_PROGRAM_ID } from 'constants/solana/bufferLayouts';\nimport { mintTestTokenAsyncAction } from 'store/commands';\nimport { SOLANA_API } from 'store/middlewares';\nimport { ApiSolanaService } from 'store/middlewares/solana-api/services';\nimport { AppThunk } from 'store/types';\nimport {\n  initializeAccountInstruction,\n  initializeMintInstruction,\n  mintToInstruction,\n} from 'store/utils/instructions/tokenProgram';\n\nexport const createAndInitializeMint = ({\n  owner, // Account for paying fees and allowed to mint new tokens\n  mint, // Account to hold token information\n  amount, // Number of tokens to issue\n  decimals,\n  initialAccount, // Account to hold newly issued tokens, if amount > 0\n}: {\n  owner: web3.Account;\n  mint: web3.Account;\n  amount: number;\n  decimals: number;\n  initialAccount: web3.Account;\n}): AppThunk => async (dispatch) => {\n  const connection = ApiSolanaService.getConnection();\n\n  const transaction = new web3.Transaction();\n\n  const lamportsForMint = await connection.getMinimumBalanceForRentExemption(MINT_LAYOUT.span);\n\n  transaction.add(\n    web3.SystemProgram.createAccount({\n      fromPubkey: owner.publicKey,\n      newAccountPubkey: mint.publicKey,\n      lamports: lamportsForMint,\n      space: MINT_LAYOUT.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n\n  transaction.add(\n    initializeMintInstruction({\n      mint: mint.publicKey,\n      decimals,\n      mintAuthority: owner.publicKey,\n    }),\n  );\n\n  const signers = [owner, mint];\n\n  if (amount > 0) {\n    signers.push(initialAccount);\n\n    const lamportsForAccount = await connection.getMinimumBalanceForRentExemption(\n      ACCOUNT_LAYOUT.span,\n    );\n\n    transaction.add(\n      web3.SystemProgram.createAccount({\n        fromPubkey: owner.publicKey,\n        newAccountPubkey: initialAccount.publicKey,\n        lamports: lamportsForAccount,\n        space: ACCOUNT_LAYOUT.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n    );\n\n    transaction.add(\n      initializeAccountInstruction({\n        account: initialAccount.publicKey,\n        mint: mint.publicKey,\n        owner: owner.publicKey,\n      }),\n    );\n\n    transaction.add(\n      mintToInstruction({\n        mint: mint.publicKey,\n        destination: initialAccount.publicKey,\n        amount,\n        mintAuthority: owner.publicKey,\n      }),\n    );\n  }\n\n  return dispatch({\n    [SOLANA_API]: {\n      action: mintTestTokenAsyncAction,\n      transaction,\n      signers,\n      options: {\n        preflightCommitment: 'single',\n      },\n    },\n  });\n};\n\nconst createAndInitializeTokenAccount = ({\n  payer,\n  mintPublicKey,\n  newAccount,\n}: {\n  payer: web3.Account;\n  mintPublicKey: web3.PublicKey;\n  newAccount: web3.Account;\n}): AppThunk => async (dispatch) => {\n  const connection = ApiSolanaService.getConnection();\n\n  const transaction = new web3.Transaction();\n\n  const lamportsForAccount = await connection.getMinimumBalanceForRentExemption(\n    ACCOUNT_LAYOUT.span,\n  );\n\n  transaction.add(\n    web3.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: newAccount.publicKey,\n      lamports: lamportsForAccount,\n      space: ACCOUNT_LAYOUT.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n\n  transaction.add(\n    initializeAccountInstruction({\n      account: newAccount.publicKey,\n      mint: mintPublicKey,\n      owner: payer.publicKey,\n    }),\n  );\n\n  return dispatch({\n    [SOLANA_API]: {\n      action: mintTestTokenAsyncAction,\n      transaction,\n      signers: [payer, newAccount],\n      options: {\n        preflightCommitment: 'single',\n      },\n    },\n  });\n};\n\nexport const createTokenAccount = (tokenAddress: web3.PublicKey): AppThunk => (\n  dispatch,\n  getState,\n) => {\n  const ownerAccount = getState().data.blockchain.account;\n\n  if (!ownerAccount) {\n    // TODO: check auth\n    console.info('TODO: check auth');\n  }\n\n  return dispatch(\n    createAndInitializeTokenAccount({\n      payer: ownerAccount,\n      mintPublicKey: tokenAddress,\n      newAccount: new web3.Account(),\n    }),\n  );\n};\n","import React, { FunctionComponent, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as web3 from '@solana/web3.js';\nimport classNames from 'classnames';\nimport { styled } from 'linaria/react';\nimport { rgba } from 'polished';\nimport { Avatar, Button, Icon, Input } from 'components/ui';\nimport { TokenType } from 'constants/tokens';\nimport { createTokenAccount } from 'store/actions/complex/tokens';\nconst Wrapper = /*#__PURE__*/styled(\"div\")({\n  name: \"Wrapper\",\n  class: \"w2hsup5\"\n});\nconst ChevronWrapper = /*#__PURE__*/styled(\"div\")({\n  name: \"ChevronWrapper\",\n  class: \"cjk37vx\"\n});\nconst ChevronIcon = /*#__PURE__*/styled(Icon)({\n  name: \"ChevronIcon\",\n  class: \"c1aewuyh\"\n});\nconst Main = /*#__PURE__*/styled(\"div\")({\n  name: \"Main\",\n  class: \"m1x0i73s\"\n});\nconst Content = /*#__PURE__*/styled(\"div\")({\n  name: \"Content\",\n  class: \"c1lrr91s\"\n});\nconst InfoWrapper = /*#__PURE__*/styled(\"div\")({\n  name: \"InfoWrapper\",\n  class: \"ifuaxgh\"\n});\nconst AvatarStyled = /*#__PURE__*/styled(Avatar)({\n  name: \"AvatarStyled\",\n  class: \"asx2g64\"\n});\nconst Info = /*#__PURE__*/styled(\"div\")({\n  name: \"Info\",\n  class: \"i10180ct\"\n});\nconst Top = /*#__PURE__*/styled(\"div\")({\n  name: \"Top\",\n  class: \"t1idmxl7\"\n});\nconst Bottom = /*#__PURE__*/styled(\"div\")({\n  name: \"Bottom\",\n  class: \"b5vkidx\"\n});\nconst Additional = /*#__PURE__*/styled(\"div\")({\n  name: \"Additional\",\n  class: \"ajtzobz\"\n});\nconst CopyWrapper = /*#__PURE__*/styled(\"div\")({\n  name: \"CopyWrapper\",\n  class: \"cr7kpio\"\n});\nconst CopyIcon = /*#__PURE__*/styled(Icon)({\n  name: \"CopyIcon\",\n  class: \"c1n4pegg\"\n});\nexport const TokenRow: FunctionComponent<TokenType> = ({\n  mintAddress,\n  tokenName,\n  tokenSymbol,\n  icon\n}) => {\n  const dispatch = useDispatch(); // eslint-disable-next-line unicorn/no-null\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleChevronClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleAddClick = () => {\n    const mint = new web3.PublicKey(mintAddress);\n    dispatch(createTokenAccount(mint));\n  };\n\n  const handleCopyClick = () => {\n    const input = inputRef.current;\n\n    if (input) {\n      input.focus();\n      input.setSelectionRange(0, input.value.length);\n      document.execCommand('copy');\n    }\n  };\n\n  return <Wrapper>\n      <ChevronWrapper onClick={handleChevronClick} className={classNames({\n      opened: isOpen\n    })}>\n        <ChevronIcon name=\"chevron\" />\n      </ChevronWrapper>\n      <Main>\n        <Content>\n          <InfoWrapper onClick={handleChevronClick}>\n            <AvatarStyled src={icon} />\n            <Info>\n              <Top>\n                <div>{tokenSymbol}</div> <div />\n              </Top>\n              <Bottom>\n                <div>{tokenName}</div> <div />\n              </Bottom>\n            </Info>\n          </InfoWrapper>\n          <Button secondary small onClick={handleAddClick}>\n            Add\n          </Button>\n        </Content>\n        <Additional className={classNames({\n        opened: isOpen\n      })}>\n          <Input ref={inputRef} title={`${tokenSymbol} Mint Address`} value={mintAddress} readOnly postfix={<CopyWrapper onClick={handleCopyClick}>\n                <CopyIcon name=\"copy\" />\n              </CopyWrapper>} />\n        </Additional>\n      </Main>\n    </Wrapper>;\n};","export { TokenRow } from './TokenRow';\n","import React, { FunctionComponent } from 'react';\nimport { styled } from 'linaria/react';\nimport { TokenType } from 'constants/tokens';\nimport { TokenRow } from '../TokenRow';\nconst Wrapper = /*#__PURE__*/styled(\"div\")({\n  name: \"Wrapper\",\n  class: \"w1wf7dhi\"\n});\ntype Props = {\n  items?: TokenType[]; // TODO: not any\n\n};\nexport const TokenList: FunctionComponent<Props> = ({\n  items\n}) => {\n  if (!items) {\n    return null;\n  }\n\n  return <Wrapper>\n      {items.map(item => <TokenRow key={item.mintAddress} {...item} />)}\n    </Wrapper>;\n};","export { TokenList } from './TokenList';\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as web3 from '@solana/web3.js';\nimport { styled } from 'linaria/react';\nimport { Modal } from 'components/common/Modal';\nimport { Button } from 'components/ui';\nimport { TOKENS_BY_ENTRYPOINT } from 'constants/tokens';\nimport { createAndInitializeMint } from 'store/actions/complex/tokens';\nimport { RootState } from 'store/types';\nimport { TokenList } from './TokenList';\nconst WrapperModal = /*#__PURE__*/styled(Modal)({\n  name: \"WrapperModal\",\n  class: \"wiqml5\"\n});\nconst ScrollableContainer = /*#__PURE__*/styled(\"div\")({\n  name: \"ScrollableContainer\",\n  class: \"s17ynaak\"\n}); // const ITEMS = [\n//   {\n//     symbol: 'SRM',\n//     name: 'Serum',\n//     price: '$0.887832',\n//     delta: '+16.9% for 24hrs',\n//   },\n//   {\n//     symbol: 'MSRM',\n//     name: 'MegaSerum',\n//     price: '$0.887832',\n//     delta: '+16.9% for 24hrs',\n//   },\n//   {\n//     symbol: 'BTC',\n//     name: 'Wrapped Bitcoin',\n//     price: '$0.887832',\n//     delta: '+16.9% for 24hrs',\n//   },\n//   {\n//     symbol: 'ETH',\n//     name: 'Wrapped Ethereum',\n//     price: '$0.887832',\n//     delta: '+16.9% for 24hrs',\n//   },\n//   {\n//     symbol: 'FTT',\n//     name: 'Wrapped FTT',\n//     price: '$0.887832',\n//     delta: '+16.9% for 24hrs',\n//   },\n//   {\n//     symbol: 'YFI',\n//     name: 'Wrapped YFI',\n//     price: '$0.887832',\n//     delta: '+16.9% for 24hrs',\n//   },\n//   {\n//     symbol: 'YFI',\n//     name: 'Wrapped YFI',\n//     price: '$0.887832',\n//     delta: '+16.9% for 24hrs',\n//   },\n// ];\n\ntype Props = {\n  close: () => void;\n};\nexport const AddCoinModal: FunctionComponent<Props> = ({\n  close\n}) => {\n  const dispatch = useDispatch();\n  const ownerAccount = useSelector((state: RootState) => state.data.blockchain.account);\n  const entrypoint = useSelector((state: RootState) => state.data.blockchain.entrypoint);\n  const tokenAccounts = useSelector((state: RootState) => state.entities.tokens.items);\n  const tokens = TOKENS_BY_ENTRYPOINT[entrypoint];\n  const isMainnetEntrypoint = entrypoint === web3.clusterApiUrl('mainnet-beta');\n\n  const handleMintTestTokenClick = () => {\n    if (!ownerAccount) {\n      return;\n    }\n\n    dispatch(createAndInitializeMint({\n      owner: ownerAccount,\n      mint: new web3.Account(),\n      amount: 1000,\n      decimals: 2,\n      initialAccount: new web3.Account()\n    }));\n  };\n\n  const filteredTokens = useMemo(() => {\n    if (!tokens) {\n      return;\n    }\n\n    const existsMintAccounts = new Set(Object.values(tokenAccounts).map(token => token.parsed.mint?.toBase58()));\n    return tokens.filter(token => !existsMintAccounts.has(token.mintAddress));\n  }, [tokenAccounts, tokens]);\n  return <WrapperModal title=\"Add coins\" description={<>\n          Add a token to your wallet. This will cost 0.002039 SOL.\n          {!isMainnetEntrypoint ? <>\n              {' '}\n              <Button link onClick={handleMintTestTokenClick}>\n                Mint test token\n              </Button>\n            </> : null}\n        </>} close={close}>\n      <ScrollableContainer>\n        <TokenList items={filteredTokens} />\n      </ScrollableContainer>\n    </WrapperModal>;\n};","export { AddCoinModal as default } from './AddCoinModal';\n"]}