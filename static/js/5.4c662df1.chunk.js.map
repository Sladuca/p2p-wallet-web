{"version":3,"sources":["components/modals/TransactionInfoModals/common/styled.ts","components/modals/TransactionInfoModals/TransactionStatusModal/TransactionStatusModal.tsx"],"names":["Wrapper","Header","Title","Desc","CloseWrapper","CloseIcon","BlockWrapper","CheckmarkIcon","OtherIcon","ProgressWrapper","Content","SendWrapper","ValueCurrency","ValueOriginal","SwapWrapper","SwapColumn","SwapInfo","SwapBlock","SwapIcon","SwapAmount","FieldsWrapper","FieldWrapper","FieldTitle","FieldValue","ShareIcon","ShareWrapper","Footer","ButtonExplorer","ProgressLine","TransactionStatusModal","close","dispatch","useDispatch","useState","transaction","useSelector","state","signature","Transaction","cluster","tokenAccounts","useEffect","newProgress","timerId","setInterval","setProgress","progress","clearTimeout","executeAction","a","setIsExecuting","unwrapResult","resultSignature","setSignature","type","transferNotification","header","text","fromToken","symbol","setIsError","ToastManager","mount","getTransaction","setTimeout","publicKey","isReceiver","useMemo","tokenAccount","handleCloseClick","isProcessing","isSuccess","onClick","name","className","classNames","isError","style","width","prefix","value","size","toToken","href","getExplorerUrl","target","rel","navigator","error","console","primary","disabled","lightGray"],"mappings":"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","file":"static/js/5.4c662df1.chunk.js","sourcesContent":["import { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Button, Icon } from 'components/ui';\n\nexport const Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 524px;\n  flex-direction: column;\n  overflow: hidden;\n\n  background: #fff;\n\n  border-radius: 15px;\n`;\n\nexport const Header = styled.div`\n  position: relative;\n\n  padding: 26px 20px 50px;\n\n  text-align: center;\n`;\n\nexport const Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nexport const Desc = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nexport const CloseWrapper = styled.div`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  background: #f6f6f8;\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: #a3a5ba;\n`;\n\nexport const BlockWrapper = styled.div`\n  position: absolute;\n  bottom: -28px;\n  left: 50%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n  margin-left: -27px;\n\n  background: #5887ff;\n  border-radius: 12px;\n\n  &.isProcessing {\n    background: #ffd177;\n  }\n\n  &.isSuccess {\n    background: #77db7c;\n  }\n\n  &.isError {\n    background: #f77;\n  }\n`;\n\nexport const CheckmarkIcon = styled(Icon)`\n  width: 45px;\n  height: 45px;\n\n  color: #fff;\n`;\n\nexport const OtherIcon = styled(Icon)`\n  width: 37px;\n  height: 37px;\n\n  color: #fff;\n`;\n\nexport const ProgressWrapper = styled.div`\n  height: 1px;\n\n  background: rgba(0, 0, 0, 0.05);\n`;\n\nexport const Content = styled.div`\n  padding-top: 40px;\n`;\n\nexport const SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nexport const ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nexport const SwapWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const SwapColumn = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n\n  &:not(:first-child) {\n    justify-content: flex-start;\n  }\n\n  &:not(:last-child) {\n    justify-content: flex-end;\n  }\n`;\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SwapBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n  margin: 6px 26px 0;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nexport const SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nexport const SwapAmount = styled.div`\n  margin-top: 10px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 120%;\n`;\n\nexport const FieldsWrapper = styled.div``;\n\nexport const FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid ${rgba('#000', 0.05)};\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${rgba('#000', 0.05)};\n  }\n`;\n\nexport const FieldTitle = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nexport const FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 21px;\n`;\n\nexport const ShareIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nexport const ShareWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: #eff3ff;\n\n    ${ShareIcon} {\n      color: #5887ff;\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 24px 20px;\n\n  border-top: 1px solid ${rgba('#000', 0.05)};\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n\n  &.isCentered {\n    justify-content: center;\n  }\n`;\n\nexport const ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n","// eslint-disable-next-line eslint-comments/disable-enable-pair\n/* eslint-disable unicorn/no-nested-ternary */\nimport React, { FunctionComponent, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { styled } from '@linaria/react';\nimport { AsyncThunkAction, unwrapResult } from '@reduxjs/toolkit';\nimport classNames from 'classnames';\nimport { Decimal } from 'decimal.js';\n\nimport { Token } from 'api/token/Token';\nimport { Transaction } from 'api/transaction/Transaction';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { Button } from 'components/ui';\nimport { getTransaction } from 'store/slices/transaction/TransactionSlice';\nimport { getExplorerUrl } from 'utils/connection';\nimport { transferNotification } from 'utils/transactionNotifications';\n\nimport {\n  BlockWrapper,\n  ButtonExplorer,\n  CheckmarkIcon,\n  CloseIcon,\n  CloseWrapper,\n  Content,\n  Desc,\n  FieldsWrapper,\n  FieldTitle,\n  FieldValue,\n  FieldWrapper,\n  Footer,\n  Header,\n  OtherIcon,\n  ProgressWrapper,\n  SendWrapper,\n  ShareIcon,\n  ShareWrapper,\n  SwapAmount,\n  SwapBlock,\n  SwapColumn,\n  SwapIcon,\n  SwapInfo,\n  SwapWrapper,\n  Title,\n  ValueCurrency,\n  ValueOriginal,\n  Wrapper,\n} from '../common/styled';\n\nconst INITIAL_PROGRESS = 5;\n\nconst ProgressLine = styled.div`\n  width: ${INITIAL_PROGRESS}%;\n  height: 1px;\n\n  background: #5887ff;\n\n  transition: width 0.15s;\n`;\n\ntype Props = {\n  type: 'send' | 'swap';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  action: AsyncThunkAction<string, any, any>;\n  fromToken: Token;\n  fromAmount: Decimal;\n  toToken?: Token;\n  toAmount?: Decimal;\n  close: (signature: string | null) => void;\n};\n\nconst handleCopyClick = (publicKey: string) => () => {\n  try {\n    void navigator.clipboard.writeText(publicKey);\n    ToastManager.info('Copied to buffer!');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const TransactionStatusModal: FunctionComponent<Props> = ({\n  type,\n  action,\n  fromToken,\n  fromAmount,\n  toToken,\n  toAmount,\n  close,\n}) => {\n  const dispatch = useDispatch();\n  const [progress, setProgress] = useState(5);\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [signature, setSignature] = useState<string | null>(null);\n  const transaction = useSelector(\n    (state) =>\n      (signature &&\n        state.transaction.items[signature] &&\n        Transaction.from(state.transaction.items[signature])) ||\n      null,\n  );\n  const cluster = useSelector((state) => state.wallet.network.cluster);\n  const tokenAccounts = useSelector((state) => state.wallet.tokenAccounts);\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (!isExecuting) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= 95) {\n        newProgress += 7;\n        setProgress(newProgress);\n      } else {\n        newProgress = 95;\n        setProgress(newProgress);\n      }\n    }, 2500);\n\n    return () => {\n      clearTimeout(timerId);\n      setProgress(100);\n    };\n  }, [isExecuting]);\n\n  const executeAction = async () => {\n    try {\n      setIsExecuting(true);\n\n      const resultSignature = unwrapResult(await dispatch(action));\n      setSignature(resultSignature);\n\n      if (type === 'send') {\n        transferNotification({\n          header: 'Sent',\n          text: `- ${fromToken.toMajorDenomination(fromAmount).toString()} ${fromToken.symbol}`,\n          symbol: fromToken.symbol,\n        });\n      }\n    } catch (error) {\n      setIsError(true);\n      setIsExecuting(false);\n      ToastManager.error((error as Error).message);\n    }\n  };\n\n  useEffect(() => {\n    void executeAction();\n  }, []);\n\n  useEffect(() => {\n    const mount = async () => {\n      if (!signature) {\n        return;\n      }\n\n      try {\n        const trx = unwrapResult(await dispatch(getTransaction(signature)));\n\n        if (!trx) {\n          setTimeout(mount, 3000);\n          return;\n        }\n\n        if (isError) {\n          setIsError(false);\n        }\n      } catch (error) {\n        setIsError(true);\n        setIsExecuting(false);\n        ToastManager.error((error as Error).message);\n      }\n\n      setIsExecuting(false);\n    };\n\n    void mount();\n  }, [signature]);\n\n  const isReceiver = useMemo(() => {\n    if (!transaction) {\n      return null;\n    }\n\n    return tokenAccounts.find(\n      (tokenAccount) => tokenAccount.address === transaction.short.destination?.toBase58(),\n    );\n  }, [transaction?.short.destination, tokenAccounts]);\n\n  const handleRetryClick = () => {\n    void executeAction();\n  };\n\n  const handleCloseClick = () => {\n    close(signature);\n  };\n\n  const isProcessing = !signature || !transaction;\n  const isSuccess = signature && transaction;\n\n  const renderTitle = () => {\n    if (isSuccess) {\n      return 'Success';\n    }\n\n    if (isError) {\n      return 'Something went wrong';\n    }\n\n    return type === 'send' ? 'Sending...' : 'Swapping...';\n  };\n\n  const renderDescription = () => {\n    if (isSuccess) {\n      return type === 'send'\n        ? `You’ve successfully sent ${fromToken.symbol}`\n        : 'You’ve successfully swapped tokens';\n    }\n\n    if (isError) {\n      return type === 'send' ? 'Tokens have not been debited' : 'Tokens have not been swapped';\n    }\n\n    return 'Transaction processing';\n  };\n\n  return (\n    <Wrapper>\n      <Header>\n        <Title>{renderTitle()}</Title>\n        <Desc>{renderDescription()}</Desc>\n        <CloseWrapper onClick={handleCloseClick}>\n          <CloseIcon name=\"close\" />\n        </CloseWrapper>\n        <BlockWrapper\n          className={classNames({\n            isProcessing,\n            isSuccess,\n            isError,\n          })}>\n          {isSuccess ? (\n            <CheckmarkIcon name=\"checkmark\" />\n          ) : (\n            <OtherIcon name={isError ? 'warning' : 'timer'} />\n          )}\n        </BlockWrapper>\n      </Header>\n      <ProgressWrapper>\n        <ProgressLine style={{ width: `${progress}%` }} />\n      </ProgressWrapper>\n      <Content>\n        {type === 'send' ? (\n          <SendWrapper>\n            <ValueCurrency>\n              {isReceiver ? '+' : '-'}{' '}\n              {transaction?.short.destinationAmount.toNumber() ||\n                fromToken.toMajorDenomination(fromAmount).toString()}{' '}\n              {transaction?.short.sourceTokenAccount?.mint.symbol || fromToken.symbol}\n            </ValueCurrency>\n            <ValueOriginal>\n              <AmountUSD\n                prefix={isReceiver ? '+' : '-'}\n                symbol={transaction?.short.sourceTokenAccount?.mint.symbol || fromToken.symbol}\n                value={\n                  transaction?.short.destinationAmount || fromToken.toMajorDenomination(fromAmount)\n                }\n              />\n            </ValueOriginal>\n          </SendWrapper>\n        ) : undefined}\n        {/* // TODO: actual swap transaction details */}\n        {type === 'swap' && toToken && toAmount ? (\n          <SwapWrapper>\n            <SwapColumn>\n              <SwapInfo>\n                <TokenAvatar size={44} symbol={fromToken.symbol} />\n                <SwapAmount>\n                  - {fromToken.toMajorDenomination(fromAmount).toString()} {fromToken.symbol}\n                </SwapAmount>\n              </SwapInfo>\n            </SwapColumn>\n            <SwapBlock>\n              <SwapIcon name=\"swap\" />\n            </SwapBlock>\n            <SwapColumn>\n              <SwapInfo>\n                <TokenAvatar size={44} symbol={toToken.symbol} />\n                <SwapAmount>\n                  + {toToken.toMajorDenomination(toAmount).toString()} {toToken.symbol}\n                </SwapAmount>\n              </SwapInfo>\n            </SwapColumn>\n          </SwapWrapper>\n        ) : undefined}\n        {signature ? (\n          <FieldsWrapper>\n            <FieldWrapper>\n              <FieldTitle>Transaction ID</FieldTitle>\n              <FieldValue>\n                {signature}{' '}\n                <a\n                  href={getExplorerUrl('tx', signature, cluster)}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer noindex\"\n                  className=\"button\">\n                  <ShareWrapper onClick={handleCopyClick(signature)}>\n                    <ShareIcon name=\"copy\" />\n                  </ShareWrapper>\n                </a>\n              </FieldValue>\n            </FieldWrapper>\n          </FieldsWrapper>\n        ) : undefined}\n      </Content>\n      <Footer>\n        {isError ? (\n          <>\n            <Button primary disabled={isExecuting} onClick={handleRetryClick}>\n              Try again\n            </Button>\n            <Button lightGray disabled={isExecuting} onClick={handleCloseClick}>\n              Cancel\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button primary onClick={handleCloseClick}>\n              Done\n            </Button>\n            {signature ? (\n              <a\n                href={getExplorerUrl('tx', signature, cluster)}\n                target=\"_blank\"\n                rel=\"noopener noreferrer noindex\"\n                className=\"button\">\n                <ButtonExplorer lightGray>View in blockchain explorer</ButtonExplorer>\n              </a>\n            ) : undefined}\n          </>\n        )}\n      </Footer>\n    </Wrapper>\n  );\n};\n"],"sourceRoot":""}