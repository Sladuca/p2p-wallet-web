{"version":3,"sources":["components/modals/TransactionDetailsModal/TransactionDetailsModal.tsx"],"names":["Wrapper","Header","Type","Date","CloseWrapper","CloseIcon","BlockWrapper","BlockIcon","Content","StatusWrapper","ValueCurrency","ValueOriginal","Status","FieldsWrapper","FieldWrapper","FieldRowWrapper","ColumnWrapper","FieldInfo","FieldTitle","FieldValue","AddressWrapper","AddressTitle","AddressValue","CopyIcon","CopyWrapper","Footer","ButtonExplorer","TransactionDetailsModal","close","dispatch","useDispatch","transaction","useSelector","state","Transaction","cluster","tokenAccounts","useEffect","mount","a","unwrapResult","getTransaction","setTimeout","details","useMemo","publicKey","date","dayjs","title","onClick","name","prefix","symbol","value","size","shortAddress","navigator","ToastManager","error","console","href","getExplorerUrl","signature","target","rel","className","secondary"],"mappings":"sVAkBMA,EAAO,sDAaPC,EAAM,oDAQNC,EAAI,mDAUJC,EAAI,mDAOJC,EAAY,0DAiBZC,EAAS,qDAOTC,EAAY,2DAgBZC,EAAS,sDAOTC,EAAO,sDAKPC,EAAa,2DAObC,EAAa,4DAObC,EAAa,2DASbC,EAAM,qDAgBNC,EAAa,2DAEbC,EAAY,0DAYZC,EAAe,yDAMfC,EAAa,0DAEbC,EAAS,wDAKTC,EAAU,wDAOVC,EAAU,yDAUVC,EAAc,6DAOdC,EAAY,2DAOZC,EAAY,2DASZC,EAAQ,qDAORC,EAAW,0DAsBXC,EAAM,qDASNC,EAAc,0DAqBPC,EAAoD,SAAC,GAAiC,QAAjC,EAAiC,EAAjC,YAAiC,EAAjC,OAAqBC,EAAY,EAAZA,MAC/EC,EAAWC,cACXC,EAAcC,aACjBC,YAAD,OACEA,wBAAsCC,SAAiBD,oBAF3D,OAIME,EAAUH,aAAaC,YAAD,OAAWA,SAAvC,WACMG,EAAgBJ,aAAaC,YAAD,OAAWA,SAA7C,iBAEAI,qBAAU,WACR,IAAMC,EAAK,uCAAG,sBAAAC,EAAA,kEACAC,IADA,SACmBX,EAASY,YAAxC,IADY,mCAIVC,WAAWJ,EAAXI,KAJU,2CAAH,qDAQX,GACOJ,MAEN,CAZHD,IAcA,IAAMM,EAAUC,mBAAQ,WAAM,MAC5B,SAIOb,oBAAoBA,2BAApBA,aAAoBA,SAA3B,IAHE,OAID,QAACA,QAAD,IAACA,OAAD,EAACA,QAAD,YANH,IAQA,IAAKY,IAAL,EACE,YAGF,IA5CuBE,EA4CjBC,EAAOf,YACTgB,SAAWhB,EAAXgB,kBADShB,iBAENA,EAFP,KAAaA,SAIb,OACE,yBACE,yBACE,yBAAOY,EAAD,MACN,qBAAMK,MAAA,UAAUjB,EAAhB,KAAM,UAAmC,GACzC,qBAAckB,QAAd,GACE,qBAAWC,KAAX,WAEF,yBAAeP,OAAe,qBAAWO,KAAMP,EAAhCA,YAAD,IAEhB,yBACE,yBACE,yBACE,uBACEQ,OAAQR,iBADV,IAEES,OAAA,UAAQT,sBAAR,aAAQA,OAFV,OAGEU,MAAOV,EAHT,UAMF,yBACGA,iBAAD,IADF,IACoCA,SAAD,WAA2B,IAD9D,UAEGA,sBAFH,aAEGA,OAAD,QAEF,uCAEF,yBACE,yBACGA,qBACC,yBACE,iCACA,yBACE,uBAAaS,OAAQT,0BAArB,OAA6DW,KAA7D,KACA,yBACE,yBAAeX,0BAAD,QACd,yBACGY,YAAaZ,6BAAd,qBARV,EAcCA,0BACC,yBACE,+BACA,yBACE,uBAAaS,OAAQT,+BAArB,OAAkEW,KAAlE,KACA,yBACE,yBAAeX,+BAAD,QACd,yBACGY,YAAaZ,kCAAd,qBARV,GAeF,yBACE,iCACA,yBAAY,IAEd,yBACE,mCACA,yBAAaA,SAAD,aAEd,yBACE,kCACA,yBAAaA,SAAD,aAEbZ,OACC,yBACE,gCACA,yBAAaA,OAAD,IAAZ,cAHJ,KAMA,yBACE,yCACA,6BAAcA,EAAD,OAEf,yBACE,2CACA,yBACE,EAAW,IACX,qBAAakB,SAlIFJ,EAkIX,EAlIiC,WAC7C,IACOW,8BAAL,GACAC,8BACA,MAAOC,GACPC,qBA8HY,qBAAUT,KAAV,cAMV,yBACE,uBACEU,KAAMC,YAAe,KAAMC,EAD7B,GAEEC,OAFF,SAGEC,IAHF,8BAIEC,UAJF,UAKE,qBAAgBC,WAAhB,sC","file":"static/js/5.5006359f.chunk.js","sourcesContent":["import React, { FunctionComponent, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { styled } from '@linaria/react';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { PublicKey, TransactionSignature } from '@solana/web3.js';\nimport dayjs from 'dayjs';\nimport { rgba } from 'polished';\n\nimport { Transaction } from 'api/transaction/Transaction';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { Button, Icon } from 'components/ui';\nimport { getTransaction } from 'store/slices/transaction/TransactionSlice';\nimport { getExplorerUrl } from 'utils/connection';\nimport { shortAddress } from 'utils/tokens';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 524px;\n  flex-direction: column;\n  overflow: hidden;\n\n  background: #f6f6f8;\n\n  border-radius: 15px;\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  padding: 26px 20px 50px;\n\n  text-align: center;\n`;\n\nconst Type = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nconst Date = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nconst CloseWrapper = styled.div`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  background: #fff;\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: #a3a5ba;\n`;\n\nconst BlockWrapper = styled.div`\n  position: absolute;\n  bottom: -28px;\n  left: 50%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n  margin-left: -27px;\n\n  background: #5887ff;\n  border-radius: 12px;\n`;\n\nconst BlockIcon = styled(Icon)`\n  width: 25px;\n  height: 25px;\n\n  color: #fff;\n`;\n\nconst Content = styled.div`\n  background: #fff;\n  border-radius: 0 0 15px 15px;\n`;\n\nconst StatusWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 40px 0 20px;\n`;\n\nconst ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nconst ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nconst Status = styled.div`\n  display: flex;\n  align-items: center;\n  height: 32px;\n  margin-top: 20px;\n  padding: 6px 12px;\n\n  color: #17971d;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 20px;\n\n  background: rgba(45, 181, 51, 0.3);\n  border-radius: 10px;\n`;\n\nconst FieldsWrapper = styled.div``;\n\nconst FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid ${rgba('#000', 0.05)};\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${rgba('#000', 0.05)};\n  }\n`;\n\nconst FieldRowWrapper = styled(FieldWrapper)`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 36px;\n`;\n\nconst ColumnWrapper = styled.div``;\n\nconst FieldInfo = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nconst FieldTitle = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nconst FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nconst AddressWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  margin: 0 9px 0 12px;\n`;\n\nconst AddressTitle = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst AddressValue = styled.div`\n  margin-bottom: 5px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n`;\n\nconst CopyIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nconst CopyWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: #eff3ff;\n\n    ${CopyIcon} {\n      color: #5887ff;\n    }\n  }\n`;\n\nconst Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 85px;\n\n  background: #f6f6f8;\n`;\n\nconst ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n\ntype Props = {\n  signature: TransactionSignature;\n  source: PublicKey;\n  close: () => void;\n};\n\nconst handleCopyClick = (publicKey: string) => () => {\n  try {\n    void navigator.clipboard.writeText(publicKey);\n    ToastManager.info('Copied to buffer!');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const TransactionDetailsModal: FunctionComponent<Props> = ({ signature, source, close }) => {\n  const dispatch = useDispatch();\n  const transaction = useSelector(\n    (state) =>\n      state.transaction.items[signature] && Transaction.from(state.transaction.items[signature]),\n  );\n  const cluster = useSelector((state) => state.wallet.cluster);\n  const tokenAccounts = useSelector((state) => state.wallet.tokenAccounts);\n\n  useEffect(() => {\n    const mount = async () => {\n      const trx = unwrapResult(await dispatch(getTransaction(signature)));\n\n      if (!trx) {\n        setTimeout(mount, 3000);\n      }\n    };\n\n    if (!transaction) {\n      void mount();\n    }\n  }, [signature]);\n\n  const details = useMemo(() => {\n    if (!transaction) {\n      return null;\n    }\n\n    return transaction.details(transaction.short.destination?.equals(source));\n  }, [transaction?.short.destination, tokenAccounts]);\n\n  if (!details || !transaction) {\n    return null;\n  }\n\n  const date = transaction.timestamp\n    ? dayjs.unix(transaction.timestamp).format('LLL')\n    : `${transaction.slot} SLOT`;\n\n  return (\n    <Wrapper>\n      <Header>\n        <Type>{details.type}</Type>\n        <Date title={`${transaction.slot} SLOT`}>{date}</Date>\n        <CloseWrapper onClick={close}>\n          <CloseIcon name=\"close\" />\n        </CloseWrapper>\n        <BlockWrapper>{details.icon ? <BlockIcon name={details.icon} /> : undefined}</BlockWrapper>\n      </Header>\n      <Content>\n        <StatusWrapper>\n          <ValueCurrency>\n            <AmountUSD\n              prefix={details.isReceiver ? '+' : '-'}\n              symbol={details.tokenAccount?.mint.symbol}\n              value={details.amount}\n            />\n          </ValueCurrency>\n          <ValueOriginal>\n            {details.isReceiver ? '+' : '-'} {details.amount.toNumber()}{' '}\n            {details.tokenAccount?.mint.symbol}\n          </ValueOriginal>\n          <Status>Completed</Status>\n        </StatusWrapper>\n        <FieldsWrapper>\n          <FieldRowWrapper>\n            {details.sourceTokenAccount ? (\n              <ColumnWrapper>\n                <FieldTitle>From</FieldTitle>\n                <FieldInfo>\n                  <TokenAvatar symbol={details.sourceTokenAccount.mint.symbol} size={48} />\n                  <AddressWrapper>\n                    <AddressTitle>{details.sourceTokenAccount.mint.symbol}</AddressTitle>\n                    <AddressValue>\n                      {shortAddress(details.sourceTokenAccount.address.toBase58())}\n                    </AddressValue>\n                  </AddressWrapper>\n                </FieldInfo>\n              </ColumnWrapper>\n            ) : undefined}\n            {details.destinationTokenAccount ? (\n              <ColumnWrapper>\n                <FieldTitle>To</FieldTitle>\n                <FieldInfo>\n                  <TokenAvatar symbol={details.destinationTokenAccount.mint.symbol} size={48} />\n                  <AddressWrapper>\n                    <AddressTitle>{details.destinationTokenAccount.mint.symbol}</AddressTitle>\n                    <AddressValue>\n                      {shortAddress(details.destinationTokenAccount.address.toBase58())}\n                    </AddressValue>\n                  </AddressWrapper>\n                </FieldInfo>\n              </ColumnWrapper>\n            ) : undefined}\n          </FieldRowWrapper>\n          <FieldWrapper>\n            <FieldTitle>Date</FieldTitle>\n            <FieldValue>{date}</FieldValue>\n          </FieldWrapper>\n          <FieldWrapper>\n            <FieldTitle>Amount</FieldTitle>\n            <FieldValue>{details.amount.toNumber()}</FieldValue>\n          </FieldWrapper>\n          <FieldWrapper>\n            <FieldTitle>Value</FieldTitle>\n            <FieldValue>{details.amount.toNumber()}</FieldValue>\n          </FieldWrapper>\n          {transaction.meta ? (\n            <FieldWrapper>\n              <FieldTitle>Fee</FieldTitle>\n              <FieldValue>{transaction.meta.fee} lamports</FieldValue>\n            </FieldWrapper>\n          ) : null}\n          <FieldWrapper>\n            <FieldTitle>Block number</FieldTitle>\n            <FieldValue>#{transaction.slot}</FieldValue>\n          </FieldWrapper>\n          <FieldWrapper>\n            <FieldTitle>Transaction ID</FieldTitle>\n            <FieldValue>\n              {signature}{' '}\n              <CopyWrapper onClick={handleCopyClick(signature)}>\n                <CopyIcon name=\"copy\" />\n              </CopyWrapper>\n            </FieldValue>\n          </FieldWrapper>\n        </FieldsWrapper>\n      </Content>\n      <Footer>\n        <a\n          href={getExplorerUrl('tx', signature, cluster)}\n          target=\"_blank\"\n          rel=\"noopener noreferrer noindex\"\n          className=\"button\">\n          <ButtonExplorer secondary>View in blockchain explorer</ButtonExplorer>\n        </a>\n      </Footer>\n    </Wrapper>\n  );\n};\n"],"sourceRoot":""}